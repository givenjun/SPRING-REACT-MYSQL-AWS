{"ast":null,"code":"import{useEffect,useState}from'react';const usePagination=countPerPage=>{//          state: 전체 객체 리스트 상태          //\nconst[totalList,setTotalList]=useState([]);//          state: 보여줄 객체 리스트 상태          //\nconst[viewList,setViewList]=useState([]);//          state: 현재 페이지 번호 상태          //\nconst[currentPage,setCurrentPage]=useState(1);//          state: 전체 페이지 번호 리스트 상태          //\nconst[totalPageList,setTotalPageList]=useState([1]);//          state: 보여줄 페이지 번호 리스트 상태          //\nconst[viewPageList,setViewPageList]=useState([1]);//          state: 현재 섹션 상태          //\nconst[currentSection,setCurrentSection]=useState(1);//          state: 전체 섹션 상태          //\nconst[totalSection,setTotalSection]=useState(1);//          function: 보여줄 객체 리스트 추출 함수          //\nconst setView=()=>{const FIRST_INDEX=countPerPage*(currentPage-1);const LAST_INDEX=totalList.length>countPerPage*currentPage?countPerPage*currentPage:totalList.length;const viewList=totalList.slice(FIRST_INDEX,LAST_INDEX);setViewList(viewList);};//          function: 보여줄 페이지 리스트 추출 함수          //\nconst setViewPage=()=>{const FIRST_INDEX=10*(currentSection-1);const LAST_INDEX=totalPageList.length>10*currentSection?10*currentSection:totalPageList.length;const viewPageList=totalPageList.slice(FIRST_INDEX,LAST_INDEX);setViewPageList(viewPageList);};//          effect: total list가 변경될 때마다 실행할 작업          //\nuseEffect(()=>{const totalPage=Math.ceil(totalList.length/countPerPage);const totalPageList=[];for(let page=1;page<=totalPage;page++)totalPageList.push(page);setTotalPageList(totalPageList);const totalSection=Math.ceil(totalList.length/(countPerPage*10));setTotalSection(totalSection);setCurrentPage(1);setCurrentSection(1);setView();setViewPage();},[totalList]);//          effect: current page가 변경될 때마다 실행할 작업          //\nuseEffect(setView,[currentPage]);//          effect: current section이 변경될 때마다 실행할 작업          //\nuseEffect(setViewPage,[currentSection]);return{currentPage,setCurrentPage,currentSection,setCurrentSection,viewList,viewPageList,totalSection,setTotalList};};export default usePagination;","map":{"version":3,"names":["useEffect","useState","usePagination","countPerPage","totalList","setTotalList","viewList","setViewList","currentPage","setCurrentPage","totalPageList","setTotalPageList","viewPageList","setViewPageList","currentSection","setCurrentSection","totalSection","setTotalSection","setView","FIRST_INDEX","LAST_INDEX","length","slice","setViewPage","totalPage","Math","ceil","page","push"],"sources":["C:/Users/정준/Documents/spring-react-mysql/board-front/src/hooks/pagination.hook.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nconst usePagination = <T>(countPerPage: number) => {\r\n    //          state: 전체 객체 리스트 상태          //\r\n    const [totalList, setTotalList] = useState<T[]>([]);\r\n    //          state: 보여줄 객체 리스트 상태          //\r\n    const [viewList, setViewList] = useState<T[]>([]);\r\n\r\n    //          state: 현재 페이지 번호 상태          //\r\n    const [currentPage, setCurrentPage] = useState<number>(1);\r\n\r\n    //          state: 전체 페이지 번호 리스트 상태          //\r\n    const [totalPageList, setTotalPageList] = useState<number[]>([1]);\r\n    //          state: 보여줄 페이지 번호 리스트 상태          //\r\n    const [viewPageList, setViewPageList] = useState<number[]>([1]);\r\n\r\n    //          state: 현재 섹션 상태          //\r\n    const [currentSection, setCurrentSection] = useState<number>(1);\r\n    //          state: 전체 섹션 상태          //\r\n    const [totalSection, setTotalSection] = useState<number>(1);\r\n\r\n    //          function: 보여줄 객체 리스트 추출 함수          //\r\n    const setView = () => {\r\n        const FIRST_INDEX = countPerPage * (currentPage - 1);\r\n        const LAST_INDEX = totalList.length > countPerPage * currentPage ? countPerPage * currentPage : totalList.length;\r\n        const viewList = totalList.slice(FIRST_INDEX, LAST_INDEX);\r\n        setViewList(viewList);\r\n    };\r\n    //          function: 보여줄 페이지 리스트 추출 함수          //\r\n    const setViewPage = () => {\r\n        const FIRST_INDEX = 10 * (currentSection - 1);\r\n        const LAST_INDEX = totalPageList.length > 10 * currentSection ? 10 * currentSection : totalPageList.length;\r\n        const viewPageList = totalPageList.slice(FIRST_INDEX, LAST_INDEX);\r\n        setViewPageList(viewPageList);\r\n    };\r\n\r\n    //          effect: total list가 변경될 때마다 실행할 작업          //\r\n    useEffect(() => {\r\n        const totalPage = Math.ceil(totalList.length / countPerPage);\r\n        const totalPageList: number[] = [];\r\n        for (let page = 1; page <= totalPage; page++) totalPageList.push(page);\r\n        setTotalPageList(totalPageList);\r\n\r\n        const totalSection = Math.ceil(totalList.length / (countPerPage * 10));\r\n        setTotalSection(totalSection);\r\n\r\n        setCurrentPage(1);\r\n        setCurrentSection(1);\r\n\r\n        setView();\r\n        setViewPage();\r\n    }, [totalList]);\r\n\r\n    //          effect: current page가 변경될 때마다 실행할 작업          //\r\n    useEffect(setView, [currentPage]);\r\n    //          effect: current section이 변경될 때마다 실행할 작업          //\r\n    useEffect(setViewPage, [currentSection]);\r\n\r\n    return {\r\n        currentPage,\r\n        setCurrentPage,\r\n        currentSection,\r\n        setCurrentSection,\r\n        viewList,\r\n        viewPageList,\r\n        totalSection,\r\n        setTotalList\r\n    };\r\n\r\n};\r\n\r\nexport default usePagination;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}