{"ast":null,"code":"import axios from 'axios';\nconst DOMAIN = 'http://localhost:4000';\nconst API_DOMAIN = `${DOMAIN}/api/v1`;\nconst SIGN_IN_URL = () => `${API_DOMAIN}/auth/sign-in`;\n_c = SIGN_IN_URL;\nconst SIGN_UP_URL = () => `${API_DOMAIN}/auth/sign-up`;\n_c2 = SIGN_UP_URL;\nexport const signInRequest = async requestBody => {\n  try {\n    // axios.isAxiosError 타입 가드를 쓰면 error.response 가 언제 존재하는지 안전하게 알 수 있어요.\n    const response = await axios.post(SIGN_IN_URL(), requestBody);\n    return response.data;\n  } catch (err) {\n    // AxiosError 로 좁혀서 처리\n    if (axios.isAxiosError(err)) {\n      var _ref, _err$response;\n      // 에러 응답 객체가 있으면 그 안의 data, 없으면 null 반환\n      return (_ref = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) !== null && _ref !== void 0 ? _ref : null;\n    }\n    // axios 가 아닌 다른 예상치 못한 에러\n    console.error('Unexpected error', err);\n    return null;\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"SIGN_IN_URL\");\n$RefreshReg$(_c2, \"SIGN_UP_URL\");","map":{"version":3,"names":["axios","DOMAIN","API_DOMAIN","SIGN_IN_URL","_c","SIGN_UP_URL","_c2","signInRequest","requestBody","response","post","data","err","isAxiosError","_ref","_err$response","console","error","$RefreshReg$"],"sources":["C:/Users/정준/Documents/spring-react-mysql/board-front/src/apis/index.ts"],"sourcesContent":["import axios from 'axios'\r\nimport { SignInRequestDto, SingUpRequestDto } from './request/auth'\r\nimport { SignInResponseDto } from './response/auth'\r\nimport { ResponseDto } from './response'\r\n\r\nconst DOMAIN = 'http://localhost:4000'\r\nconst API_DOMAIN = `${DOMAIN}/api/v1`\r\nconst SIGN_IN_URL = () => `${API_DOMAIN}/auth/sign-in`\r\nconst SIGN_UP_URL = () => `${API_DOMAIN}/auth/sign-up`\r\n\r\nexport const signInRequest = async (\r\n  requestBody: SignInRequestDto\r\n): Promise<SignInResponseDto | ResponseDto | null> => {\r\n  try {\r\n    // axios.isAxiosError 타입 가드를 쓰면 error.response 가 언제 존재하는지 안전하게 알 수 있어요.\r\n    const response = await axios.post<SignInResponseDto>(SIGN_IN_URL(), requestBody)\r\n    return response.data\r\n  } catch (err: unknown) {\r\n    // AxiosError 로 좁혀서 처리\r\n    if (axios.isAxiosError(err)) {\r\n      // 에러 응답 객체가 있으면 그 안의 data, 없으면 null 반환\r\n      return err.response?.data as ResponseDto ?? null\r\n    }\r\n    // axios 가 아닌 다른 예상치 못한 에러\r\n    console.error('Unexpected error', err)\r\n    return null\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAKzB,MAAMC,MAAM,GAAG,uBAAuB;AACtC,MAAMC,UAAU,GAAG,GAAGD,MAAM,SAAS;AACrC,MAAME,WAAW,GAAGA,CAAA,KAAM,GAAGD,UAAU,eAAe;AAAAE,EAAA,GAAhDD,WAAW;AACjB,MAAME,WAAW,GAAGA,CAAA,KAAM,GAAGH,UAAU,eAAe;AAAAI,GAAA,GAAhDD,WAAW;AAEjB,OAAO,MAAME,aAAa,GAAG,MAC3BC,WAA6B,IACuB;EACpD,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAoBP,WAAW,CAAC,CAAC,EAAEK,WAAW,CAAC;IAChF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,GAAY,EAAE;IACrB;IACA,IAAIZ,KAAK,CAACa,YAAY,CAACD,GAAG,CAAC,EAAE;MAAA,IAAAE,IAAA,EAAAC,aAAA;MAC3B;MACA,QAAAD,IAAA,IAAAC,aAAA,GAAOH,GAAG,CAACH,QAAQ,cAAAM,aAAA,uBAAZA,aAAA,CAAcJ,IAAI,cAAAG,IAAA,cAAAA,IAAA,GAAmB,IAAI;IAClD;IACA;IACAE,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEL,GAAG,CAAC;IACtC,OAAO,IAAI;EACb;AACF,CAAC;AAAA,IAAAR,EAAA,EAAAE,GAAA;AAAAY,YAAA,CAAAd,EAAA;AAAAc,YAAA,CAAAZ,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}