{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import'./style.css';import InputBox from'components/InputBox';import{signInRequest,signUpRequest}from'apis';import{useCookies}from'react-cookie';import{MAIN_PATH}from'constant';import{useNavigate}from'react-router-dom';import{useDaumPostcodePopup}from'react-daum-postcode';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";//          component: 인증 화면 컴포넌트          //\nexport default function Authentication(){//          state: 화면 상태          //\nconst[view,setView]=useState('sign-in');//          state: 쿠키 상태          //\nconst[cookies,setCookie]=useCookies();//           function: 네비게이트 함수          //\nconst navigate=useNavigate();//          component: sign in card 컴포넌트          //\nconst SignInCard=()=>{//          state: 이메일 요소 참조 상태          //\nconst emailRef=useRef(null);//          state: 패스워드 요소 참조 상태          //\nconst passwordRef=useRef(null);//          state: 이메일 상태          //\nconst[email,setEmail]=useState('');//          state: 패스워드 상태          //\nconst[password,setPassword]=useState('');//          state: 패스워드 타입 상태          //\nconst[passwordType,setPasswordType]=useState('password');//          state: 패스워드 버튼 아이콘 상태          //\nconst[passwordButtonIcon,setPasswordButtonIcon]=useState('eye-light-off-icon');//          state: 에러 상태          //\nconst[error,setError]=useState(false);//          function: sign in response 처리 함수           //\nconst signInResponse=responseBody=>{if(!responseBody){alert('네트워크 이상입니다.');return;}const{code}=responseBody;if(code==='DBE')alert('데이터베이스 오류입니다.');if(code==='SF'||code==='VF')setError(true);if(code!=='SU')return;const{token,expirationTime}=responseBody;const now=new Date().getTime();const expires=new Date(now+expirationTime*1000);setCookie('accessToken',token,{expires,path:MAIN_PATH()});navigate(MAIN_PATH());};//          event handler: 이메일 변경 이벤트 처리 함수          //\nconst onEmailChangeHandler=event=>{setError(false);const{value}=event.target;setEmail(value);};//          event handler: 패스워드 변경 이벤트 처리 함수          //\nconst onPasswordChangeHandler=event=>{setError(false);const{value}=event.target;setPassword(value);};//          event handler: 로그인 버튼 클릭 이벤트 처리 함수          //\nconst onSignInButtonClickHandler=()=>{const requestBody={email,password};signInRequest(requestBody).then(signInResponse);};//          event handler: 회원가입 링크 클릭 이벤트 처리 함수          //\nconst onSignUpLinkClickHandler=()=>{setView('sign-up');};//          event handler: 패스워드 버튼 클릭 이벤트 처리 함수          //\nconst onPasswordButtonClickHandler=()=>{if(passwordType==='text'){setPasswordType('password');setPasswordButtonIcon('eye-light-off-icon');}else{setPasswordType('text');setPasswordButtonIcon('eye-light-on-icon');}};//          event handler: 이메일 인풋 키 다운 이벤트 처리 함수          //\nconst onEmailKeyDownHandler=event=>{if(event.key!=='Enter')return;if(!passwordRef.current)return;passwordRef.current.focus();};//          event handler: 패스워드 인풋 키 다운 이벤트 처리 함수          //\nconst onPasswordKeyDownHandler=event=>{if(event.key!=='Enter')return;onSignInButtonClickHandler();};//          render: sign in card 컴포넌트 렌더링          //  \nreturn/*#__PURE__*/_jsx(\"div\",{className:\"auth-card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"auth-card-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"auth-card-top\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"auth-card-title-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"auth-card-title\",children:'로그인'})}),/*#__PURE__*/_jsx(InputBox,{ref:emailRef,label:\"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\",type:\"text\",placeholder:\"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",error:error,value:email,onChange:onEmailChangeHandler,onKeyDown:onEmailKeyDownHandler}),/*#__PURE__*/_jsx(InputBox,{ref:passwordRef,label:\"\\uBE44\\uBC00\\uBC88\\uD638\",type:passwordType,placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",error:error,value:password,onChange:onPasswordChangeHandler,icon:passwordButtonIcon,onButtonClick:onPasswordButtonClickHandler,onKeyDown:onPasswordKeyDownHandler})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"auth-card-bottom\",children:[error&&/*#__PURE__*/_jsx(\"div\",{className:\"auth-sign-in-error-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"auth-sign-in-error-message\",children:'이메일 주소 또는 비밀번호를 잘못 입력했습니다.\\n입력하신 내용을 다시 확인해주세요.'})}),/*#__PURE__*/_jsx(\"div\",{className:\"black-large-full-button\",onClick:onSignInButtonClickHandler,children:'로그인'}),/*#__PURE__*/_jsx(\"div\",{className:\"auth-description-box\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"auth-description\",children:['신규 사용자 이신가요? ',/*#__PURE__*/_jsx(\"span\",{className:\"auth-description-link\",onClick:onSignUpLinkClickHandler,children:'회원가입'})]})})]})]})});};//          component: sign up card 컴포넌트          //\nconst SignUpCard=()=>{//          state: 이메일 요소 참조 상태          //\nconst emailRef=useRef(null);//          state: 패스워드 요소 참조 상태          //\nconst passwordRef=useRef(null);//          state: 패스워드 확인 요소 참조 상태          //\nconst passwordCheckRef=useRef(null);//          state: 닉네임 요소 참조 상태          //\nconst nicknameRef=useRef(null);//          state: 전화번호 요소 참조 상태          //\nconst telNumberRef=useRef(null);//          state: 주소 요소 참조 상태          //\nconst addressRef=useRef(null);//          state: 상세 주소 요소 참조 상태          //\nconst addressDetailRef=useRef(null);//          state: 페이지 번호 상태           //\nconst[page,setPage]=useState(1);//          state: 이메일 상태           //\nconst[email,setEmail]=useState('');//          state: 패스워드 상태           //\nconst[password,setPassword]=useState('');//          state: 패스워드 확인 상태           //\nconst[passwordCheck,setPasswordCheck]=useState('');//          state: 닉네임 상태           //\nconst[nickname,setNickname]=useState('');//          state: 휴대전화번호 상태           //\nconst[telNumber,setTelNumber]=useState('');//          state: 주소 상태           //\nconst[address,setAddress]=useState('');//          state: 상세 주소 상태           //\nconst[addressDetail,setAddressDetail]=useState('');//          state: 개인 정보 동의 상태           //\nconst[agreedPersonal,setAgreedPersonal]=useState(false);//          state: 패스워드 타입 상태           //\nconst[passwordType,setPasswordType]=useState('password');//          state: 패스워드 확인 타입 상태           //\nconst[passwordCheckType,setPasswordCheckType]=useState('password');//          state: 이메일 에러 상태           //\nconst[isEmailError,setEmailError]=useState(false);//          state: 패스워드 에러 상태           //\nconst[isPasswordError,setPasswordError]=useState(false);//          state: 패스워드 확인 에러 상태           //\nconst[isPasswordCheckError,setPasswordCheckError]=useState(false);//          state: 닉네임 에러 상태           //\nconst[isNicknameError,setNicknameError]=useState(false);//          state: 휴대전화번호 에러 상태           //\nconst[isTelNumberError,setTelNumberError]=useState(false);//          state: 주소 에러 상태           //\nconst[isAddressError,setAddressError]=useState(false);//          state: 개인 정보 동의 에러 상태           //\nconst[isAgreedPersonalError,setAgreedPersonalError]=useState(false);//          state: 이메일 에러 메시지 상태           //\nconst[emailErrorMessage,setEmailErrorMessage]=useState('');//          state: 패스워드 에러 메시지 상태           //\nconst[passwordErrorMessage,setPasswordErrorMessage]=useState('');//          state: 패스워드 확인 에러 메시지 상태           //\nconst[passwordCheckErrorMessage,setPasswordCheckErrorMessage]=useState('');//          state: 닉네임 에러 메시지 상태           //\nconst[nicknameErrorMessage,setNicknameErrorMessage]=useState('');//          state: 휴대전호번호 에러 메시지 상태           //\nconst[telNumberErrorMessage,setTelNumberErrorMessage]=useState('');//          state: 주소 에러 메시지 상태           //\nconst[addressErrorMessage,setAddressErrorMessage]=useState('');//          state: 패스워드 버튼 아이콘 상태          //\nconst[passwordButtonIcon,setPasswordButtonIcon]=useState('eye-light-off-icon');//          state: 패스워드 확인 버튼 아이콘 상태          //\nconst[passwordCheckButtonIcon,setPasswordCheckButtonIcon]=useState('eye-light-off-icon');//          function: 다음 주소 검색 팝업 오픈 함수          //\nconst open=useDaumPostcodePopup();//          function: sign up response 함수          //\nconst signUpResponse=responseBody=>{if(!responseBody){alert('네트워크 이상입니다.');return;}const{code}=responseBody;if(code==='DE'){setPage(1);setEmailError(true);setEmailErrorMessage('중복되는 이메일 주소입니다.');}if(code==='DN'){setNicknameError(true);setNicknameErrorMessage('중복되는 닉네임입니다.');}if(code==='DT'){setTelNumberError(true);setTelNumberErrorMessage('중복되는 휴대전화번호입니다.');}if(code==='VF'){alert('모든 값을 입력하세요.');}if(code==='DBE'){alert('데이터베이스 오류입니다.');}if(code!=='SU')return;setView('sign-in');};//          event handler: 이메일 변경 이벤트 처리 함수          //\nconst onEmailChangeHandler=event=>{const{value}=event.target;setEmail(value);setEmailError(false);setEmailErrorMessage('');};//          event handler: 패스워드 변경 이벤트 처리 함수          //\nconst onPasswordChangeHandler=event=>{const{value}=event.target;setPassword(value);setPasswordError(false);setPasswordErrorMessage('');};//          event handler: 패스워드 확인 변경 이벤트 처리 함수          //\nconst onPasswordCheckChangeHandler=event=>{const{value}=event.target;setPasswordCheck(value);setPasswordCheckError(false);setPasswordCheckErrorMessage('');};//          event handler: 닉네임 변경 이벤트 처리 함수          //\nconst onNicknamehangeHandler=event=>{const{value}=event.target;setNickname(value);setNicknameError(false);setNicknameErrorMessage('');};//          event handler: 휴대전화번호 변경 이벤트 처리 함수          //\nconst onTelNumberChangeHandler=event=>{const{value}=event.target;setTelNumber(value);setTelNumberError(false);setTelNumberErrorMessage('');};//          event handler: 주소 변경 이벤트 처리 함수          //\nconst onAddressChangeHandler=event=>{const{value}=event.target;setAddress(value);setAddressError(false);setAddressErrorMessage('');};//          event handler: 상세 주소 변경 이벤트 처리 함수          //\nconst onAddressDetailChangeHandler=event=>{const{value}=event.target;setAddressDetail(value);};//          event handler: 개인 정보 동의 체크 박스 클릭 이벤트 처리 함수          //\nconst onAgreedPersonalClickHandler=()=>{setAgreedPersonal(!agreedPersonal);setAgreedPersonalError(false);};//          event handler: 패스워드 버튼 클릭 이벤트 처리 함수          //\nconst onPasswordButtonClickHandler=()=>{if(passwordButtonIcon==='eye-light-off-icon'){setPasswordButtonIcon('eye-light-on-icon');setPasswordType('text');}else{setPasswordButtonIcon('eye-light-off-icon');setPasswordType('password');}};//          event handler: 패스워드 확인 버튼 클릭 이벤트 처리 함수          //\nconst onPasswordCheckButtonClickHandler=()=>{if(passwordCheckButtonIcon==='eye-light-off-icon'){setPasswordCheckButtonIcon('eye-light-on-icon');setPasswordCheckType('text');}else{setPasswordCheckButtonIcon('eye-light-off-icon');setPasswordCheckType('password');}};//          event handler: 주소 버튼 클릭 이벤트 처리 함수          //\nconst onAddressButtonClickHandler=()=>{open({onComplete});};//          event handler: 다음단계 버튼 클릭 이벤트 처리 함수          //\nconst onNextButtonClickHandler=()=>{const isEmailBlank=email.trim().length!==0;if(!isEmailBlank){setEmailError(true);setEmailErrorMessage('이메일을 입력해주세요.');}const emailPattern=/^[a-zA-Z0-9]*@([-.]?[a-zA-Z0-9])*\\.[a-zA-z]{2,4}$/;const isEmailPattern=emailPattern.test(email);if(isEmailBlank&&!isEmailPattern){setEmailError(true);setEmailErrorMessage('이메일 주소 포맷이 맞지 않습니다.');}const isPasswordBlank=password.trim().length!==0;if(!isPasswordBlank){setPasswordError(true);setPasswordErrorMessage('비밀번호를 입력해주세요.');}const isCheckedPassword=password.trim().length>7;if(isPasswordBlank&&!isCheckedPassword){setPasswordError(true);setPasswordErrorMessage('비밀번호는 8자 이상 입력해주세요.');}const isPasswordCheckBlank=password.trim().length!==0;if(!isPasswordCheckBlank){setPasswordCheckError(false);setPasswordCheckErrorMessage('');}const isEqualPassword=password===passwordCheck;if(isPasswordCheckBlank&&!isEqualPassword){setPasswordCheckError(true);setPasswordCheckErrorMessage('비밀번호가 일치하지 않습니다.');}if(!isEmailPattern||!isCheckedPassword||!isEqualPassword)return;setPage(2);};//          event handler: 회원가입 버튼 클릭 이벤트 처리 함수          //\nconst onSignUpButtonClickHandler=()=>{const isEmailBlank=email.trim().length!==0;if(!isEmailBlank){setEmailError(true);setEmailErrorMessage('이메일을 입력해주세요.');}const emailPattern=/^[a-zA-Z0-9]*@([-.]?[a-zA-Z0-9])*\\.[a-zA-z]{2,4}$/;const isEmailPattern=emailPattern.test(email);if(isEmailBlank&&!isEmailPattern){setEmailError(true);setEmailErrorMessage('이메일 주소 포맷이 맞지 않습니다.');}const isPasswordBlank=password.trim().length!==0;if(!isPasswordBlank){setPasswordError(true);setPasswordErrorMessage('비밀번호를 입력해주세요.');}const isCheckedPassword=password.trim().length>7;if(isPasswordBlank&&!isCheckedPassword){setPasswordError(true);setPasswordErrorMessage('비밀번호를 8자 이상 입력해주세요.');}const isPasswordCheckBlank=password.trim().length!==0;if(!isPasswordCheckBlank){setPasswordCheckError(false);setPasswordCheckErrorMessage('');}const isEqualPassword=password===passwordCheck;if(isPasswordCheckBlank&&!isEqualPassword){setPasswordCheckError(true);setPasswordCheckErrorMessage('비밀번호가 일치하지 않습니다.');}if(!isEmailPattern||!isCheckedPassword||!isEqualPassword){setPage(1);return;}const isNicknameBlank=nickname.trim().length>0;if(!isNicknameBlank){setNicknameError(true);setNicknameErrorMessage('닉네임을 입력해주세요.');}const isTelNumberBlank=telNumber.trim().length>0;if(!isTelNumberBlank){setTelNumberError(true);setTelNumberErrorMessage('휴대전화번호를 입력해주세요.');}const isTelNumberLength=telNumber.trim().length>10;if(isTelNumberBlank&&!isTelNumberLength){setTelNumberError(true);setTelNumberErrorMessage('휴대전화번호를 전부 입력해주세요.');}const telNumberPattern=/^[0-9]{11,13}$/;const isTelNumberPattern=telNumberPattern.test(telNumber);if(isTelNumberBlank&&isTelNumberLength&&!isTelNumberPattern){setTelNumberError(true);setTelNumberErrorMessage('숫자만 입력해주세요.');}const isAddressBlank=address.trim().length>0;if(!isAddressBlank){setAddressError(true);setAddressErrorMessage('주소를 선택해주세요.');}if(!agreedPersonal)setAgreedPersonalError(true);if(!isNicknameBlank||!isTelNumberPattern||!isAddressBlank||!agreedPersonal)return;const requestBody={email,password,nickname,telNumber,address,addressDetail,agreedPersonal};signUpRequest(requestBody).then(signUpResponse);};//          event handler: 로그인 링크 클릭 이벤트 처리 함수          //\nconst onSignInLinkClickHandler=()=>{setView('sign-in');};//          event handler: 이메일 키 다운 이벤트 처리 함수          //\nconst onEmailKeyDownHandler=event=>{if(event.key!=='Enter')return;if(!passwordRef.current)return;passwordRef.current.focus();};//          event handler: 패스워드 키 다운 이벤트 처리 함수          //\nconst onPasswordKeyDownHandler=event=>{if(event.key!=='Enter')return;if(!passwordCheckRef.current)return;passwordCheckRef.current.focus();};//          event handler: 패스워드 확인 키 다운 이벤트 처리 함수          //\nconst onPasswordCheckKeyDownHandler=event=>{if(event.key!=='Enter')return;onNextButtonClickHandler();};//          event handler: 닉네임 키 다운 이벤트 처리 함수          //\nconst onNicknameKeyDownHandler=event=>{if(event.key!=='Enter')return;if(!telNumberRef.current)return;telNumberRef.current.focus();};//          event handler: 휴대전화번호 키 다운 이벤트 처리 함수          //\nconst onTelNumberKeyDownHandler=event=>{if(event.key!=='Enter')return;onAddressButtonClickHandler();};//          event handler: 주소 키 다운 이벤트 처리 함수          //\nconst onAddressKeyDownHandler=event=>{if(event.key!=='Enter')return;if(!addressDetailRef.current)return;addressDetailRef.current.focus();};//          event handler: 상세 주소 키 다운 이벤트 처리 함수          //\nconst onAddressDetailKeyDownHandler=event=>{if(event.key!=='Enter')return;onSignUpButtonClickHandler();};//          event handler: 다음 주소 검색 완료 이벤트 처리 함수          //\nconst onComplete=data=>{const{address}=data;setAddress(address);setAddressError(false);setAddressErrorMessage('');if(!addressDetailRef.current)return;addressDetailRef.current.focus();};//          effect: 페이지가 변경될 때 마다 실행될 함수          //\nuseEffect(()=>{if(page===2){if(!nicknameRef.current)return;nicknameRef.current.focus();}},[page]);//          render: sign up card 컴포넌트 렌더링          //  \nreturn/*#__PURE__*/_jsx(\"div\",{className:\"auth-card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"auth-card-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"auth-card-top\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"auth-card-title-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"auth-card-title\",children:'회원가입'}),/*#__PURE__*/_jsx(\"div\",{className:\"auth-card-page\",children:`${page}/2`})]}),page===1&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(InputBox,{ref:emailRef,label:\"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C*\",type:\"text\",placeholder:\"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",value:email,onChange:onEmailChangeHandler,error:isEmailError,message:emailErrorMessage,onKeyDown:onEmailKeyDownHandler}),/*#__PURE__*/_jsx(InputBox,{ref:passwordRef,label:\"\\uBE44\\uBC00\\uBC88\\uD638*\",type:passwordType,placeholder:\"\\uD328\\uC2A4\\uC6CC\\uB4DC\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",value:password,onChange:onPasswordChangeHandler,error:isPasswordError,message:passwordErrorMessage,icon:passwordButtonIcon,onButtonClick:onPasswordButtonClickHandler,onKeyDown:onPasswordKeyDownHandler}),/*#__PURE__*/_jsx(InputBox,{ref:passwordCheckRef,label:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778*\",type:passwordCheckType,placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",value:passwordCheck,onChange:onPasswordCheckChangeHandler,error:isPasswordCheckError,message:passwordCheckErrorMessage,icon:passwordCheckButtonIcon,onButtonClick:onPasswordCheckButtonClickHandler,onKeyDown:onPasswordCheckKeyDownHandler})]}),page===2&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(InputBox,{ref:nicknameRef,label:\"\\uB2C9\\uB124\\uC784*\",type:\"text\",placeholder:\"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",value:nickname,onChange:onNicknamehangeHandler,error:isNicknameError,message:nicknameErrorMessage,onKeyDown:onNicknameKeyDownHandler}),/*#__PURE__*/_jsx(InputBox,{ref:telNumberRef,label:\"\\uD734\\uB300\\uC804\\uD654 \\uBC88\\uD638*\",type:\"text\",placeholder:\"\\uD734\\uB300\\uC804\\uD654\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",value:telNumber,onChange:onTelNumberChangeHandler,error:isTelNumberError,message:telNumberErrorMessage,onKeyDown:onTelNumberKeyDownHandler}),/*#__PURE__*/_jsx(InputBox,{ref:addressRef,label:\"\\uC8FC\\uC18C*\",type:\"text\",placeholder:\"\\uC6B0\\uD3B8\\uBC88\\uD638 \\uCC3E\\uAE30\",value:address,onChange:onAddressChangeHandler,error:isAddressError,message:addressErrorMessage,icon:\"expand-right-light-icon\",onButtonClick:onAddressButtonClickHandler,onKeyDown:onAddressKeyDownHandler}),/*#__PURE__*/_jsx(InputBox,{ref:addressDetailRef,label:\"\\uC0C1\\uC138 \\uC8FC\\uC18C\",type:\"text\",placeholder:\"\\uC0C1\\uC138 \\uC8FC\\uC18C\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",value:addressDetail,onChange:onAddressDetailChangeHandler,error:false,onKeyDown:onAddressDetailKeyDownHandler})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"auth-card-bottom\",children:[page===1&&/*#__PURE__*/_jsx(\"div\",{className:\"black-large-full-button\",onClick:onNextButtonClickHandler,children:'다음 단계'}),page===2&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"auth-consent-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"auth-check-box\",onClick:onAgreedPersonalClickHandler,children:/*#__PURE__*/_jsx(\"div\",{className:`icon ${agreedPersonal?'check-round-fill-icon':'check-ring-light-icon'}`})}),/*#__PURE__*/_jsx(\"div\",{className:isAgreedPersonalError?'auth-consent-title-error':'auth-consent-title',children:'개인정보동의'}),/*#__PURE__*/_jsx(\"div\",{className:\"auth-consent-link\",children:'더보기 >'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"black-large-full-button\",onClick:onSignUpButtonClickHandler,children:'회원가입'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"auth-description-box\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"auth-description\",children:['이미 계정이 있으신가요? ',/*#__PURE__*/_jsx(\"span\",{className:\"auth-description-link\",onClick:onSignInLinkClickHandler,children:'로그인'})]})})]})]})});};//          render: 인증 화면 컴포넌트 렌더링          //  \nreturn/*#__PURE__*/_jsx(\"div\",{id:\"auth-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"auth-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"auth-jumbotron-box\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"auth-jumbotron-contents\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"auth-logo-icon\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"auth-jumbotron-text-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"auth-jumbotron-text\",children:'환영합니다'}),/*#__PURE__*/_jsx(\"div\",{className:\"auth-jumbotron-text\",children:'Jun\\'s Board 입니다.'})]})]})}),view==='sign-in'&&/*#__PURE__*/_jsx(SignInCard,{}),view==='sign-up'&&/*#__PURE__*/_jsx(SignUpCard,{})]})});};","map":{"version":3,"names":["React","useEffect","useRef","useState","InputBox","signInRequest","signUpRequest","useCookies","MAIN_PATH","useNavigate","useDaumPostcodePopup","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Authentication","view","setView","cookies","setCookie","navigate","SignInCard","emailRef","passwordRef","email","setEmail","password","setPassword","passwordType","setPasswordType","passwordButtonIcon","setPasswordButtonIcon","error","setError","signInResponse","responseBody","alert","code","token","expirationTime","now","Date","getTime","expires","path","onEmailChangeHandler","event","value","target","onPasswordChangeHandler","onSignInButtonClickHandler","requestBody","then","onSignUpLinkClickHandler","onPasswordButtonClickHandler","onEmailKeyDownHandler","key","current","focus","onPasswordKeyDownHandler","className","children","ref","label","type","placeholder","onChange","onKeyDown","icon","onButtonClick","onClick","SignUpCard","passwordCheckRef","nicknameRef","telNumberRef","addressRef","addressDetailRef","page","setPage","passwordCheck","setPasswordCheck","nickname","setNickname","telNumber","setTelNumber","address","setAddress","addressDetail","setAddressDetail","agreedPersonal","setAgreedPersonal","passwordCheckType","setPasswordCheckType","isEmailError","setEmailError","isPasswordError","setPasswordError","isPasswordCheckError","setPasswordCheckError","isNicknameError","setNicknameError","isTelNumberError","setTelNumberError","isAddressError","setAddressError","isAgreedPersonalError","setAgreedPersonalError","emailErrorMessage","setEmailErrorMessage","passwordErrorMessage","setPasswordErrorMessage","passwordCheckErrorMessage","setPasswordCheckErrorMessage","nicknameErrorMessage","setNicknameErrorMessage","telNumberErrorMessage","setTelNumberErrorMessage","addressErrorMessage","setAddressErrorMessage","passwordCheckButtonIcon","setPasswordCheckButtonIcon","open","signUpResponse","onPasswordCheckChangeHandler","onNicknamehangeHandler","onTelNumberChangeHandler","onAddressChangeHandler","onAddressDetailChangeHandler","onAgreedPersonalClickHandler","onPasswordCheckButtonClickHandler","onAddressButtonClickHandler","onComplete","onNextButtonClickHandler","isEmailBlank","trim","length","emailPattern","isEmailPattern","test","isPasswordBlank","isCheckedPassword","isPasswordCheckBlank","isEqualPassword","onSignUpButtonClickHandler","isNicknameBlank","isTelNumberBlank","isTelNumberLength","telNumberPattern","isTelNumberPattern","isAddressBlank","onSignInLinkClickHandler","onPasswordCheckKeyDownHandler","onNicknameKeyDownHandler","onTelNumberKeyDownHandler","onAddressKeyDownHandler","onAddressDetailKeyDownHandler","data","message","id"],"sources":["C:/Users/정준/Documents/spring-react-mysql/board-front/src/views/Authentication/index.tsx"],"sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useEffect, useRef, useState } from 'react'\r\nimport './style.css'\r\nimport InputBox from 'components/InputBox';\r\nimport { SignInRequestDto } from 'apis/request/auth';\r\nimport { signInRequest, signUpRequest } from 'apis';\r\nimport { SignInResponseDto, SingUpResponseDto } from 'apis/response/auth';\r\nimport { ResponseDto } from 'apis/response';\r\nimport { useCookies } from 'react-cookie';\r\nimport { MAIN_PATH } from 'constant';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Address, useDaumPostcodePopup } from 'react-daum-postcode';\r\nimport SignUpRequestDto from 'apis/request/auth/sign-up.request.dto';\r\n\r\n//          component: 인증 화면 컴포넌트          //\r\nexport default function Authentication() {\r\n\r\n  //          state: 화면 상태          //\r\n  const [view, setView] = useState<'sign-in' | 'sign-up'>('sign-in')\r\n\r\n  //          state: 쿠키 상태          //\r\n  const [ cookies, setCookie] = useCookies();\r\n\r\n  //           function: 네비게이트 함수          //\r\n  const navigate = useNavigate();\r\n\r\n  //          component: sign in card 컴포넌트          //\r\n  const SignInCard = () => {\r\n\r\n    //          state: 이메일 요소 참조 상태          //\r\n    const emailRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 패스워드 요소 참조 상태          //\r\n    const passwordRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 이메일 상태          //\r\n    const [email, setEmail] = useState<string>('');\r\n    //          state: 패스워드 상태          //\r\n    const [password, setPassword] = useState<string>('');\r\n    //          state: 패스워드 타입 상태          //\r\n    const [passwordType, setPasswordType] = useState<'text' | 'password'>('password');\r\n    //          state: 패스워드 버튼 아이콘 상태          //\r\n    const [passwordButtonIcon, setPasswordButtonIcon] = useState<'eye-light-off-icon' | 'eye-light-on-icon'>('eye-light-off-icon');\r\n    //          state: 에러 상태          //\r\n    const [error, setError] = useState<boolean>(false);\r\n    \r\n\r\n    //          function: sign in response 처리 함수           //\r\n    const signInResponse = (responseBody: SignInResponseDto | ResponseDto | null) => {\r\n      if (!responseBody) {\r\n        alert('네트워크 이상입니다.');\r\n        return;\r\n      }\r\n      const { code } = responseBody;\r\n      if (code === 'DBE') alert('데이터베이스 오류입니다.');\r\n      if (code === 'SF' || code === 'VF') setError(true);\r\n      if (code !== 'SU') return;\r\n\r\n      const { token, expirationTime } = responseBody as SignInResponseDto;\r\n      const now = new Date().getTime();\r\n      const expires = new Date(now + expirationTime * 1000);\r\n\r\n      setCookie('accessToken', token, { expires, path: MAIN_PATH() });\r\n      navigate(MAIN_PATH());\r\n\r\n    }\r\n\r\n    //          event handler: 이메일 변경 이벤트 처리 함수          //\r\n    const onEmailChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      setError(false);\r\n      const { value } = event.target;\r\n      setEmail(value);\r\n    }\r\n    //          event handler: 패스워드 변경 이벤트 처리 함수          //\r\n    const onPasswordChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      setError(false);\r\n      const { value } = event.target;\r\n      setPassword(value);\r\n    }\r\n    //          event handler: 로그인 버튼 클릭 이벤트 처리 함수          //\r\n    const onSignInButtonClickHandler = () => {\r\n        const requestBody: SignInRequestDto = { email, password };\r\n        signInRequest(requestBody).then(signInResponse);\r\n    }\r\n    //          event handler: 회원가입 링크 클릭 이벤트 처리 함수          //\r\n    const onSignUpLinkClickHandler = () => {\r\n      setView('sign-up');\r\n    }\r\n    //          event handler: 패스워드 버튼 클릭 이벤트 처리 함수          //\r\n    const onPasswordButtonClickHandler = () => {\r\n      if(passwordType === 'text'){\r\n        setPasswordType('password');\r\n        setPasswordButtonIcon('eye-light-off-icon');\r\n      }\r\n      else{\r\n        setPasswordType('text');\r\n        setPasswordButtonIcon('eye-light-on-icon');\r\n      }\r\n    }\r\n    //          event handler: 이메일 인풋 키 다운 이벤트 처리 함수          //\r\n    const onEmailKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      if (!passwordRef.current) return;\r\n      passwordRef.current.focus();\r\n    }\r\n    //          event handler: 패스워드 인풋 키 다운 이벤트 처리 함수          //\r\n    const onPasswordKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      onSignInButtonClickHandler();\r\n    }\r\n\r\n    //          render: sign in card 컴포넌트 렌더링          //  \r\n    return (\r\n      <div className='auth-card'>\r\n        <div className='auth-card-box'>\r\n          <div className='auth-card-top'>\r\n            <div className='auth-card-title-box'>\r\n              <div className='auth-card-title'>{'로그인'}</div>\r\n            </div>\r\n            <InputBox ref={emailRef} label='이메일 주소' type='text' placeholder='이메일 주소를 입력해주세요.' error={error} value={email} onChange={onEmailChangeHandler} onKeyDown={onEmailKeyDownHandler} />\r\n            <InputBox ref={passwordRef} label='비밀번호' type={passwordType} placeholder='비밀번호를 입력해주세요.' error={error} value={password} onChange={onPasswordChangeHandler} icon={passwordButtonIcon} onButtonClick={onPasswordButtonClickHandler} onKeyDown={onPasswordKeyDownHandler} />\r\n          </div>\r\n          <div className='auth-card-bottom'>\r\n            {error && \r\n            <div className='auth-sign-in-error-box'>\r\n              <div className='auth-sign-in-error-message'>\r\n                {'이메일 주소 또는 비밀번호를 잘못 입력했습니다.\\n입력하신 내용을 다시 확인해주세요.'}\r\n              </div>  \r\n            </div>  \r\n            }\r\n            <div className='black-large-full-button' onClick={onSignInButtonClickHandler}>{'로그인'}</div>\r\n            <div className='auth-description-box'>\r\n              <div className='auth-description'>{'신규 사용자 이신가요? '}\r\n                <span className='auth-description-link' onClick={onSignUpLinkClickHandler}>{'회원가입'}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //          component: sign up card 컴포넌트          //\r\n  const SignUpCard = () => {\r\n\r\n    //          state: 이메일 요소 참조 상태          //\r\n    const emailRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 패스워드 요소 참조 상태          //\r\n    const passwordRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 패스워드 확인 요소 참조 상태          //\r\n    const passwordCheckRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 닉네임 요소 참조 상태          //\r\n    const nicknameRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 전화번호 요소 참조 상태          //\r\n    const telNumberRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 주소 요소 참조 상태          //\r\n    const addressRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 상세 주소 요소 참조 상태          //\r\n    const addressDetailRef = useRef<HTMLInputElement | null>(null);\r\n\r\n    //          state: 페이지 번호 상태           //\r\n    const [page, setPage] = useState<1 | 2>(1);\r\n\r\n    //          state: 이메일 상태           //\r\n    const [email, setEmail] = useState<string>('');\r\n    //          state: 패스워드 상태           //\r\n    const [password, setPassword] = useState<string>('');\r\n    //          state: 패스워드 확인 상태           //\r\n    const [passwordCheck, setPasswordCheck] = useState<string>('');\r\n    //          state: 닉네임 상태           //\r\n    const [nickname, setNickname] = useState<string>('');\r\n    //          state: 휴대전화번호 상태           //\r\n    const [telNumber, setTelNumber] = useState<string>('');\r\n    //          state: 주소 상태           //\r\n    const [address, setAddress] = useState<string>('');\r\n    //          state: 상세 주소 상태           //\r\n    const [addressDetail, setAddressDetail] = useState<string>('');\r\n    //          state: 개인 정보 동의 상태           //\r\n    const [agreedPersonal, setAgreedPersonal] = useState<boolean>(false);\r\n\r\n    //          state: 패스워드 타입 상태           //\r\n    const [passwordType, setPasswordType] = useState<'text' | 'password'>('password');\r\n    //          state: 패스워드 확인 타입 상태           //\r\n    const [passwordCheckType, setPasswordCheckType] = useState<'text' | 'password'>('password');\r\n\r\n    //          state: 이메일 에러 상태           //\r\n    const [isEmailError, setEmailError] = useState<boolean>(false);\r\n    //          state: 패스워드 에러 상태           //\r\n    const [isPasswordError, setPasswordError] = useState<boolean>(false);\r\n    //          state: 패스워드 확인 에러 상태           //\r\n    const [isPasswordCheckError, setPasswordCheckError] = useState<boolean>(false);\r\n    //          state: 닉네임 에러 상태           //\r\n    const [isNicknameError, setNicknameError] = useState<boolean>(false);\r\n    //          state: 휴대전화번호 에러 상태           //\r\n    const [isTelNumberError, setTelNumberError] = useState<boolean>(false);\r\n    //          state: 주소 에러 상태           //\r\n    const [isAddressError, setAddressError] = useState<boolean>(false);\r\n    //          state: 개인 정보 동의 에러 상태           //\r\n    const [isAgreedPersonalError, setAgreedPersonalError] = useState<boolean>(false);\r\n\r\n    //          state: 이메일 에러 메시지 상태           //\r\n    const [emailErrorMessage, setEmailErrorMessage] = useState<string>('');\r\n    //          state: 패스워드 에러 메시지 상태           //\r\n    const [passwordErrorMessage, setPasswordErrorMessage] = useState<string>('');\r\n    //          state: 패스워드 확인 에러 메시지 상태           //\r\n    const [passwordCheckErrorMessage, setPasswordCheckErrorMessage] = useState<string>('');\r\n    //          state: 닉네임 에러 메시지 상태           //\r\n    const [nicknameErrorMessage, setNicknameErrorMessage] = useState<string>('');\r\n    //          state: 휴대전호번호 에러 메시지 상태           //\r\n    const [telNumberErrorMessage, setTelNumberErrorMessage] = useState<string>('');\r\n    //          state: 주소 에러 메시지 상태           //\r\n    const [addressErrorMessage, setAddressErrorMessage] = useState<string>('');\r\n\r\n    //          state: 패스워드 버튼 아이콘 상태          //\r\n    const [passwordButtonIcon, setPasswordButtonIcon] = useState<'eye-light-off-icon' | 'eye-light-on-icon'>('eye-light-off-icon');\r\n    //          state: 패스워드 확인 버튼 아이콘 상태          //\r\n    const [passwordCheckButtonIcon, setPasswordCheckButtonIcon] = useState<'eye-light-off-icon' | 'eye-light-on-icon'>('eye-light-off-icon');\r\n\r\n    //          function: 다음 주소 검색 팝업 오픈 함수          //\r\n    const open = useDaumPostcodePopup();\r\n\r\n    //          function: sign up response 함수          //\r\n    const signUpResponse = (responseBody: SingUpResponseDto | ResponseDto | null) => {\r\n      \r\n      if (!responseBody) {\r\n        alert ('네트워크 이상입니다.');\r\n        return;\r\n      }\r\n      const { code } = responseBody;\r\n      if (code === 'DE') {\r\n        setPage(1);\r\n        setEmailError(true);\r\n        setEmailErrorMessage('중복되는 이메일 주소입니다.')\r\n      }\r\n      if (code === 'DN') {\r\n        setNicknameError(true);\r\n        setNicknameErrorMessage('중복되는 닉네임입니다.')\r\n      }\r\n      if (code === 'DT') {\r\n        setTelNumberError(true);\r\n        setTelNumberErrorMessage('중복되는 휴대전화번호입니다.')\r\n      }\r\n      if (code === 'VF') {\r\n        alert('모든 값을 입력하세요.');\r\n      }\r\n      if (code === 'DBE') {\r\n        alert('데이터베이스 오류입니다.');\r\n      }\r\n      if (code !== 'SU') return;\r\n\r\n      setView('sign-in');\r\n    }\r\n\r\n    //          event handler: 이메일 변경 이벤트 처리 함수          //\r\n    const onEmailChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setEmail(value);\r\n      setEmailError(false);\r\n      setEmailErrorMessage('');\r\n    }\r\n    //          event handler: 패스워드 변경 이벤트 처리 함수          //\r\n    const onPasswordChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setPassword(value);\r\n      setPasswordError(false);\r\n      setPasswordErrorMessage('');\r\n    }\r\n    //          event handler: 패스워드 확인 변경 이벤트 처리 함수          //\r\n    const onPasswordCheckChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setPasswordCheck(value);\r\n      setPasswordCheckError(false);\r\n      setPasswordCheckErrorMessage('');\r\n    }\r\n    //          event handler: 닉네임 변경 이벤트 처리 함수          //\r\n    const onNicknamehangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setNickname(value);\r\n      setNicknameError(false);\r\n      setNicknameErrorMessage('');\r\n    }\r\n    //          event handler: 휴대전화번호 변경 이벤트 처리 함수          //\r\n    const onTelNumberChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setTelNumber(value);\r\n      setTelNumberError(false);\r\n      setTelNumberErrorMessage('');\r\n    }\r\n    //          event handler: 주소 변경 이벤트 처리 함수          //\r\n    const onAddressChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setAddress(value);\r\n      setAddressError(false);\r\n      setAddressErrorMessage('');\r\n    }\r\n    //          event handler: 상세 주소 변경 이벤트 처리 함수          //\r\n    const onAddressDetailChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setAddressDetail(value);\r\n    }\r\n\r\n    //          event handler: 개인 정보 동의 체크 박스 클릭 이벤트 처리 함수          //\r\n    const onAgreedPersonalClickHandler = () => {\r\n      setAgreedPersonal(!agreedPersonal);\r\n      setAgreedPersonalError(false);\r\n    }\r\n    //          event handler: 패스워드 버튼 클릭 이벤트 처리 함수          //\r\n    const onPasswordButtonClickHandler = () => {\r\n      if (passwordButtonIcon === 'eye-light-off-icon') {\r\n        setPasswordButtonIcon('eye-light-on-icon');\r\n        setPasswordType('text');\r\n      }\r\n      else {\r\n        setPasswordButtonIcon('eye-light-off-icon');\r\n        setPasswordType('password');\r\n      }\r\n    }\r\n    //          event handler: 패스워드 확인 버튼 클릭 이벤트 처리 함수          //\r\n    const onPasswordCheckButtonClickHandler = () => {\r\n      if (passwordCheckButtonIcon === 'eye-light-off-icon') {\r\n        setPasswordCheckButtonIcon('eye-light-on-icon');\r\n        setPasswordCheckType('text');\r\n      }\r\n      else {\r\n        setPasswordCheckButtonIcon('eye-light-off-icon');\r\n        setPasswordCheckType('password');\r\n      }\r\n    }\r\n    //          event handler: 주소 버튼 클릭 이벤트 처리 함수          //\r\n    const onAddressButtonClickHandler = () => {\r\n      open({ onComplete });\r\n    }\r\n    //          event handler: 다음단계 버튼 클릭 이벤트 처리 함수          //\r\n    const onNextButtonClickHandler = () => {\r\n      const isEmailBlank = email.trim().length !== 0;\r\n      if (!isEmailBlank) {\r\n        setEmailError(true);\r\n        setEmailErrorMessage('이메일을 입력해주세요.');\r\n      }\r\n      const emailPattern = /^[a-zA-Z0-9]*@([-.]?[a-zA-Z0-9])*\\.[a-zA-z]{2,4}$/;\r\n      const isEmailPattern = emailPattern.test(email);\r\n      if (isEmailBlank && !isEmailPattern) {\r\n        setEmailError(true);\r\n        setEmailErrorMessage('이메일 주소 포맷이 맞지 않습니다.');\r\n      }\r\n      const isPasswordBlank = password.trim().length !== 0;\r\n      if (!isPasswordBlank) {\r\n        setPasswordError(true);\r\n        setPasswordErrorMessage('비밀번호를 입력해주세요.');\r\n      }\r\n      const isCheckedPassword = password.trim().length > 7;\r\n      if (isPasswordBlank && !isCheckedPassword) {\r\n        setPasswordError(true);\r\n        setPasswordErrorMessage('비밀번호는 8자 이상 입력해주세요.');\r\n      }\r\n      const isPasswordCheckBlank = password.trim().length !== 0;\r\n      if (!isPasswordCheckBlank) {\r\n        setPasswordCheckError(false);\r\n        setPasswordCheckErrorMessage('');\r\n      }\r\n      const isEqualPassword = password === passwordCheck;\r\n      if (isPasswordCheckBlank && !isEqualPassword) {\r\n        setPasswordCheckError(true);  \r\n        setPasswordCheckErrorMessage('비밀번호가 일치하지 않습니다.');\r\n      }\r\n      if (!isEmailPattern || !isCheckedPassword || !isEqualPassword) return;\r\n      setPage(2);\r\n    }\r\n    //          event handler: 회원가입 버튼 클릭 이벤트 처리 함수          //\r\n    const onSignUpButtonClickHandler = () => {\r\n      const isEmailBlank = email.trim().length !== 0;\r\n      if (!isEmailBlank) {\r\n        setEmailError(true);\r\n        setEmailErrorMessage('이메일을 입력해주세요.');\r\n      }\r\n      const emailPattern = /^[a-zA-Z0-9]*@([-.]?[a-zA-Z0-9])*\\.[a-zA-z]{2,4}$/;\r\n      const isEmailPattern = emailPattern.test(email);\r\n      if (isEmailBlank && !isEmailPattern) {\r\n        setEmailError(true);\r\n        setEmailErrorMessage('이메일 주소 포맷이 맞지 않습니다.');\r\n      }\r\n      const isPasswordBlank = password.trim().length !== 0;\r\n      if (!isPasswordBlank) {\r\n        setPasswordError(true);\r\n        setPasswordErrorMessage('비밀번호를 입력해주세요.');\r\n      }\r\n      const isCheckedPassword = password.trim().length > 7;\r\n      if (isPasswordBlank && !isCheckedPassword) {\r\n        setPasswordError(true);\r\n        setPasswordErrorMessage('비밀번호를 8자 이상 입력해주세요.');\r\n      }\r\n      const isPasswordCheckBlank = password.trim().length !== 0;\r\n      if (!isPasswordCheckBlank) {\r\n        setPasswordCheckError(false);\r\n        setPasswordCheckErrorMessage('');\r\n      }\r\n      const isEqualPassword = password === passwordCheck;\r\n      if (isPasswordCheckBlank && !isEqualPassword) {\r\n        setPasswordCheckError(true);  \r\n        setPasswordCheckErrorMessage('비밀번호가 일치하지 않습니다.');\r\n      }\r\n      if (!isEmailPattern || !isCheckedPassword || !isEqualPassword) {\r\n        setPage(1);\r\n        return;\r\n      }\r\n      const isNicknameBlank = nickname.trim().length > 0;\r\n      if (!isNicknameBlank) {\r\n        setNicknameError(true);\r\n        setNicknameErrorMessage('닉네임을 입력해주세요.');\r\n      }\r\n      const isTelNumberBlank = telNumber.trim().length > 0;\r\n      if (!isTelNumberBlank) {\r\n        setTelNumberError(true);\r\n        setTelNumberErrorMessage('휴대전화번호를 입력해주세요.');\r\n      }\r\n      const isTelNumberLength = telNumber.trim().length > 10;\r\n      if (isTelNumberBlank && !isTelNumberLength) {\r\n        setTelNumberError(true);\r\n        setTelNumberErrorMessage('휴대전화번호를 전부 입력해주세요.');\r\n      }\r\n      const telNumberPattern = /^[0-9]{11,13}$/;\r\n      const isTelNumberPattern = telNumberPattern.test(telNumber)\r\n      if (isTelNumberBlank && isTelNumberLength && !isTelNumberPattern) {\r\n        setTelNumberError(true);\r\n        setTelNumberErrorMessage('숫자만 입력해주세요.');\r\n      }\r\n      const isAddressBlank = address.trim().length > 0;\r\n      if (!isAddressBlank) {\r\n        setAddressError(true);\r\n        setAddressErrorMessage('주소를 선택해주세요.');\r\n      }\r\n      if (!agreedPersonal) setAgreedPersonalError(true);\r\n\r\n      if (!isNicknameBlank || !isTelNumberPattern || !isAddressBlank || !agreedPersonal) return;\r\n\r\n      const requestBody: SignUpRequestDto = {\r\n        email, password, nickname, telNumber, address, addressDetail, agreedPersonal\r\n      };\r\n\r\n      signUpRequest(requestBody).then(signUpResponse);\r\n\r\n    }\r\n    //          event handler: 로그인 링크 클릭 이벤트 처리 함수          //\r\n    const onSignInLinkClickHandler = () => {\r\n      setView('sign-in');\r\n    }\r\n    //          event handler: 이메일 키 다운 이벤트 처리 함수          //\r\n    const onEmailKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      if (!passwordRef.current) return\r\n      passwordRef.current.focus(); \r\n    }\r\n    //          event handler: 패스워드 키 다운 이벤트 처리 함수          //\r\n    const onPasswordKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      if (!passwordCheckRef.current) return\r\n      passwordCheckRef.current.focus(); \r\n    }\r\n    //          event handler: 패스워드 확인 키 다운 이벤트 처리 함수          //\r\n    const onPasswordCheckKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      onNextButtonClickHandler();\r\n    }\r\n    //          event handler: 닉네임 키 다운 이벤트 처리 함수          //\r\n    const onNicknameKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      if (!telNumberRef.current) return;\r\n      telNumberRef.current.focus(); \r\n    }\r\n    //          event handler: 휴대전화번호 키 다운 이벤트 처리 함수          //\r\n    const onTelNumberKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      onAddressButtonClickHandler();\r\n    }\r\n    //          event handler: 주소 키 다운 이벤트 처리 함수          //\r\n    const onAddressKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      if (!addressDetailRef.current) return;\r\n      addressDetailRef.current.focus(); \r\n    }\r\n    //          event handler: 상세 주소 키 다운 이벤트 처리 함수          //\r\n    const onAddressDetailKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key !== 'Enter') return;\r\n      onSignUpButtonClickHandler();\r\n    }\r\n\r\n    //          event handler: 다음 주소 검색 완료 이벤트 처리 함수          //\r\n    const onComplete = (data: Address) => {\r\n      const { address } = data;\r\n      setAddress(address);\r\n      setAddressError(false);\r\n      setAddressErrorMessage('');\r\n      if (!addressDetailRef.current) return;\r\n      addressDetailRef.current.focus();\r\n    }\r\n\r\n    //          effect: 페이지가 변경될 때 마다 실행될 함수          //\r\n    useEffect(() => {\r\n      if (page === 2) {\r\n        if (!nicknameRef.current) return;\r\n        nicknameRef.current.focus(); \r\n      }\r\n    }, [page]);\r\n\r\n    //          render: sign up card 컴포넌트 렌더링          //  \r\n    return (\r\n      <div className='auth-card'>\r\n        <div className='auth-card-box'>\r\n          <div className='auth-card-top'>\r\n            <div className='auth-card-title-box'>\r\n              <div className='auth-card-title'>{'회원가입'}</div>\r\n              <div className='auth-card-page'>{`${page}/2`}</div>\r\n            </div>\r\n              {page === 1 && (\r\n              <>\r\n              <InputBox ref={emailRef} label='이메일 주소*' type='text' placeholder='이메일 주소를 입력해주세요.' value={email} onChange={onEmailChangeHandler} error={isEmailError} message={emailErrorMessage} onKeyDown={onEmailKeyDownHandler}/>\r\n              <InputBox ref={passwordRef} label='비밀번호*'  type={passwordType} placeholder='패스워드를 입력해주세요.' value={password} onChange={onPasswordChangeHandler} error={isPasswordError} message={passwordErrorMessage} icon={passwordButtonIcon} onButtonClick={onPasswordButtonClickHandler} onKeyDown={onPasswordKeyDownHandler}/>\r\n              <InputBox ref={passwordCheckRef} label='비밀번호 확인*' type={passwordCheckType} placeholder='비밀번호를 다시 입력해주세요.' value={passwordCheck} onChange={onPasswordCheckChangeHandler} error={isPasswordCheckError} message={passwordCheckErrorMessage} icon={passwordCheckButtonIcon} onButtonClick={onPasswordCheckButtonClickHandler} onKeyDown={onPasswordCheckKeyDownHandler}/>\r\n              </>\r\n              )}\r\n              {page === 2 && (\r\n              <>\r\n              <InputBox ref={nicknameRef} label='닉네임*' type='text' placeholder='닉네임을 입력해주세요.' value={nickname} onChange={onNicknamehangeHandler} error={isNicknameError} message={nicknameErrorMessage} onKeyDown={onNicknameKeyDownHandler}/>\r\n              <InputBox ref={telNumberRef} label='휴대전화 번호*' type='text' placeholder='휴대전화번호를 입력해주세요.' value={telNumber} onChange={onTelNumberChangeHandler} error={isTelNumberError} message={telNumberErrorMessage} onKeyDown={onTelNumberKeyDownHandler} />\r\n              <InputBox ref={addressRef} label='주소*'  type='text' placeholder='우편번호 찾기' value={address} onChange={onAddressChangeHandler} error={isAddressError} message={addressErrorMessage} icon='expand-right-light-icon' onButtonClick={onAddressButtonClickHandler} onKeyDown={onAddressKeyDownHandler}/>\r\n              <InputBox ref={addressDetailRef} label='상세 주소' type='text' placeholder='상세 주소를 입력해주세요.' value={addressDetail} onChange={onAddressDetailChangeHandler} error={false} onKeyDown={onAddressDetailKeyDownHandler}/>\r\n              </>\r\n              )}\r\n          </div>\r\n          <div className='auth-card-bottom'>\r\n              {page === 1 && (\r\n              <div className='black-large-full-button' onClick={onNextButtonClickHandler}>{'다음 단계'}</div>\r\n              )}\r\n              {page === 2 && (\r\n              <>\r\n              <div className='auth-consent-box'>\r\n                <div className='auth-check-box' onClick={onAgreedPersonalClickHandler}>\r\n                  <div className={`icon ${agreedPersonal ? 'check-round-fill-icon' : 'check-ring-light-icon' }`}></div>\r\n                </div>\r\n                <div className={isAgreedPersonalError ? 'auth-consent-title-error' : 'auth-consent-title'}>{'개인정보동의'}</div>\r\n                <div className='auth-consent-link'>{'더보기 >'}</div>\r\n              </div>\r\n              <div className='black-large-full-button' onClick={onSignUpButtonClickHandler}>{'회원가입'}</div>\r\n              </>\r\n              )}\r\n            <div className='auth-description-box'>\r\n              <div className='auth-description'>{'이미 계정이 있으신가요? '}<span className='auth-description-link' onClick={onSignInLinkClickHandler}>{'로그인'}</span></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //          render: 인증 화면 컴포넌트 렌더링          //  \r\n  return (\r\n    <div id='auth-wrapper'>\r\n      <div className='auth-container'>\r\n        <div className='auth-jumbotron-box'>\r\n          <div className='auth-jumbotron-contents'>\r\n            <div className='auth-logo-icon'></div>\r\n            <div className='auth-jumbotron-text-box'>\r\n              <div className='auth-jumbotron-text'>{'환영합니다'}</div>\r\n              <div className='auth-jumbotron-text'>{'Jun\\'s Board 입니다.'}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {view === 'sign-in' && <SignInCard/>}\r\n        {view === 'sign-up' && <SignUpCard/>}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}