{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import'./style.css';import{useNavigate,useParams}from'react-router-dom';import defaultProfileImage from'assets/image/default-profile-image.png';import BoardItem from'components/BoardItem';import{BOARD_PATH,BOARD_WRITE_PATH,MAIN_PATH,USER_PATH}from'constant';import{useLoginUserStore}from'stores';import{fileUploadRequest,getUserBoardListRequest,getUserRequest,patchNicknameRequest,patchProfileImageRequest}from'apis';import{useCookies}from'react-cookie';import{usePagination}from'hooks';import Pagination from'components/Pagination';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";//          component: 유저 화면 컴포넌트          //\nexport default function UserPage(){//          state: 마이페이지 여부 상태          //\nconst[isMyPage,setMyPage]=useState(true);//          state: 로그인 유저 상태          //\nconst{loginUser}=useLoginUserStore();//          state: 쿠키 상태          //\nconst[cookies,setCookie]=useCookies();//          state: userEmail path variable 상태          //\nconst{userEmail}=useParams();//          function: 네비게이트 함수         //\nconst navigate=useNavigate();//          component: 유저 화면 상단 컴포넌트          //\nconst UserTop=()=>{//          state: 이미지 파일 인풋 참조 상태         //\nconst imageInputRef=useRef(null);//          state: 닉네임 변경 여부 상태          //\nconst[isChangeNickname,setIsChangeNickname]=useState(false);//          state: 닉네임 상태          //\nconst[nickname,setNickname]=useState('');//          state: 닉네임 변경 상태          //\nconst[changeNickname,setChangeNickname]=useState('');//          state: 프로필 이미지 상태          //\nconst[profileImage,setProfileImage]=useState(null);//          function: get user response 처리 함수          //\nconst getUserResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code==='NU')alert('존재하지 않는 유저입니다.');if(code==='DBE')alert('데이터베이스 오류입니다.');if(code!=='SU'){navigate(MAIN_PATH());return;}const{email,nickname,profileImage}=responseBody;setNickname(nickname);setProfileImage(profileImage);const isMyPage=email===(loginUser===null||loginUser===void 0?void 0:loginUser.email);setMyPage(isMyPage);};//          function: file upload response 처리 함수          //\nconst fileUploadResponse=profileImage=>{if(!profileImage)return;if(!cookies.accessToken)return;const requestBody={profileImage};patchProfileImageRequest(requestBody,cookies.accessToken).then(patchProfileImageResponse);};//          function: patch profile image response 처리 함수          //\nconst patchProfileImageResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code==='AF')alert('인증에 실패했습니다.');if(code==='NU')alert('존재하지 않는 유저입니다.');if(code==='DBE')alert('데이터베이스 오류입니다.');if(code!=='SU')return;if(!userEmail)return;getUserRequest(userEmail).then(getUserResponse);};//          function: patch nickname response 처리 함수          //\nconst patchNicknameResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code==='VF')alert('닉네임은 필수입니다.');if(code==='AF')alert('인증에 실패했습니다.');if(code==='DN')alert('중복되는 닉네임입니다');if(code==='NU')alert('존재하지 않는 유저입니다.');if(code==='DBE')alert('데이터베이스 오류입니다.');if(code!=='SU')return;if(!userEmail)return;getUserRequest(userEmail).then(getUserResponse);};//          event handler: 프로필 박스 클릭 이벤트 처리         //\nconst onProfileBoxClickHandler=()=>{if(!isMyPage)return;if(!imageInputRef.current)return;imageInputRef.current.click();};//          event handler: 닉네임 변경 버튼 클릭 이벤트 처리         //\nconst onNicknameEditButtonClickHandler=()=>{if(!isChangeNickname){setChangeNickname(nickname);setIsChangeNickname(!isChangeNickname);return;}if(!cookies.accessToken)return;const requestBody={nickname:changeNickname};patchNicknameRequest(requestBody,cookies.accessToken).then(patchNicknameResponse);setIsChangeNickname(false);};//          event handler: 프로필 이미지 변경 이벤트 처리         //\nconst onProfileImageChangeHandler=event=>{if(!event.target.files||!event.target.files.length)return;const file=event.target.files[0];const data=new FormData();data.append('file',file);fileUploadRequest(data).then(fileUploadResponse);};//          event handler: 닉네임 변경 이벤트 처리         //\nconst onNicknameChangeHandler=event=>{const{value}=event.target;setChangeNickname(value);};//          effect: user email path variable 변경 시 실행할 함수          //\nuseEffect(()=>{if(!userEmail)return;getUserRequest(userEmail).then(getUserResponse);},[userEmail]);//          render: 유저 화면 상단 컴포넌트 렌더링          //\nreturn/*#__PURE__*/_jsx(\"div\",{id:\"user-top-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"user-top-container\",children:[isMyPage?/*#__PURE__*/_jsxs(\"div\",{className:\"user-top-my-profile-image-box\",onClick:onProfileBoxClickHandler,children:[profileImage!==null?/*#__PURE__*/_jsx(\"div\",{className:\"user-top-profile-image\",style:{backgroundImage:`url(${profileImage})`}}):/*#__PURE__*/_jsx(\"div\",{className:\"icon-box-large\",children:/*#__PURE__*/_jsx(\"div\",{className:\"icon image-box-white-icon\"})}),/*#__PURE__*/_jsx(\"input\",{ref:imageInputRef,type:\"file\",accept:\"image/*\",style:{display:'none'},onChange:onProfileImageChangeHandler})]}):/*#__PURE__*/_jsx(\"div\",{className:\"user-top-profile-image-box\",style:{backgroundImage:`url(${profileImage?profileImage:defaultProfileImage})`}}),/*#__PURE__*/_jsxs(\"div\",{className:\"user-top-info-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-nickname-box\",children:isMyPage?/*#__PURE__*/_jsxs(_Fragment,{children:[isChangeNickname?/*#__PURE__*/_jsx(\"input\",{className:\"user-top-info-nickname-input\",type:\"text\",placeholder:'닉네임',size:changeNickname.length+2,value:changeNickname,onChange:onNicknameChangeHandler}):/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-nickname\",children:nickname}),/*#__PURE__*/_jsx(\"div\",{className:\"icon-button\",onClick:onNicknameEditButtonClickHandler,children:/*#__PURE__*/_jsx(\"div\",{className:\"icon edit-icon\"})})]}):/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-nickname\",children:nickname})}),/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-email\",children:userEmail})]})]})});};//          component: 유저 화면 하단 컴포넌트          //\nconst UserBottom=()=>{//          state: 페이지네이션 관련 상태          //\nconst{currentPage,currentSection,viewList,viewPageList,totalSection,setCurrentPage,setCurrentSection,setTotalList}=usePagination(5);//          state: 게시물 개수 상태          //\nconst[count,setCount]=useState(1);//          event handler: 사이드 카드 클릭 이벤트 처리          //\nconst onSideCardClickHandler=()=>{if(isMyPage)navigate(BOARD_PATH()+'/'+BOARD_WRITE_PATH());else if(loginUser)navigate(USER_PATH(loginUser.email));};//          function: get user board list response 처리 함수          //\nconst getUserBoardListResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code==='NU'){alert('존재하지 않는 유저입니다다');navigate(MAIN_PATH());return;}if(code==='DBE')alert('데이터베이스 오류입니다.');if(code!=='SU')return;const{userBoardList}=responseBody;setTotalList(userBoardList);setCount(userBoardList.length);};//          effect: userEmail path variable 변경 시 실행할 함수         //\nuseEffect(()=>{if(!userEmail)return;getUserBoardListRequest(userEmail).then(getUserBoardListResponse);},[userEmail]);//          render: 유저 화면 하단 컴포넌트 렌더링          //  \nreturn/*#__PURE__*/_jsx(\"div\",{id:\"user-bottom-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"user-bottom-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"user-bottom-title\",children:[isMyPage?'내 게시물 ':'게시물 ',/*#__PURE__*/_jsx(\"span\",{className:\"emphasis\",children:count})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"user-bottom-contents-box\",children:[count===0?/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-contents-nothing\",children:`게시물이 없습니다.`}):/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-contents\",children:viewList.map(item=>/*#__PURE__*/_jsx(BoardItem,{boardListItem:item}))}),/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-card\",onClick:onSideCardClickHandler,children:/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-container\",children:isMyPage?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"icon-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"icon edit-icon\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-text\",children:`글쓰기`})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-text\",children:`내 게시물로 가기`}),/*#__PURE__*/_jsx(\"div\",{className:\"icon-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"icon arrow-right-icon\"})})]})})})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-pagination-box\",children:count!==0&&/*#__PURE__*/_jsx(Pagination,{currentPage:currentPage,currentSection:currentSection,setCurrentPage:setCurrentPage,setCurrentSection:setCurrentSection,viewPageList:viewPageList,totalSection:totalSection})})]})});};//          render: 유저 화면 컴포넌트 렌더링          //  \nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(UserTop,{}),/*#__PURE__*/_jsx(UserBottom,{})]});}","map":{"version":3,"names":["React","useEffect","useRef","useState","useNavigate","useParams","defaultProfileImage","BoardItem","BOARD_PATH","BOARD_WRITE_PATH","MAIN_PATH","USER_PATH","useLoginUserStore","fileUploadRequest","getUserBoardListRequest","getUserRequest","patchNicknameRequest","patchProfileImageRequest","useCookies","usePagination","Pagination","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","UserPage","isMyPage","setMyPage","loginUser","cookies","setCookie","userEmail","navigate","UserTop","imageInputRef","isChangeNickname","setIsChangeNickname","nickname","setNickname","changeNickname","setChangeNickname","profileImage","setProfileImage","getUserResponse","responseBody","code","alert","email","fileUploadResponse","accessToken","requestBody","then","patchProfileImageResponse","patchNicknameResponse","onProfileBoxClickHandler","current","click","onNicknameEditButtonClickHandler","onProfileImageChangeHandler","event","target","files","length","file","data","FormData","append","onNicknameChangeHandler","value","id","children","className","onClick","style","backgroundImage","ref","type","accept","display","onChange","placeholder","size","UserBottom","currentPage","currentSection","viewList","viewPageList","totalSection","setCurrentPage","setCurrentSection","setTotalList","count","setCount","onSideCardClickHandler","getUserBoardListResponse","userBoardList","map","item","boardListItem"],"sources":["C:/Users/정준/Documents/spring-react-mysql/board-front/src/views/User/index.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport './style.css'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport defaultProfileImage from 'assets/image/default-profile-image.png'\r\nimport { BoardListItem } from 'types/interface';\r\nimport BoardItem from 'components/BoardItem';\r\nimport { BOARD_PATH, BOARD_WRITE_PATH, MAIN_PATH, USER_PATH } from 'constant';\r\nimport { useLoginUserStore } from 'stores';\r\nimport { fileUploadRequest, getUserBoardListRequest, getUserRequest, patchNicknameRequest, patchProfileImageRequest } from 'apis';\r\nimport { GetUserResponseDto, PatchNicknameResponseDto, PatchProfileImageResponseDto } from 'apis/response/user';\r\nimport { ResponseDto } from 'apis/response';\r\nimport { PatchNicknameRequestDto, PatchProfileImageRequestDto } from 'apis/request/user';\r\nimport { useCookies } from 'react-cookie';\r\nimport { usePagination } from 'hooks';\r\nimport Pagination from 'components/Pagination';\r\nimport { GetUserBoardListResponseDto } from 'apis/response/board';\r\n\r\n//          component: 유저 화면 컴포넌트          //\r\nexport default function UserPage() {\r\n\r\n  //          state: 마이페이지 여부 상태          //\r\n  const [isMyPage, setMyPage] = useState<boolean>(true);\r\n  //          state: 로그인 유저 상태          //\r\n  const { loginUser } = useLoginUserStore();\r\n  //          state: 쿠키 상태          //\r\n  const [cookies, setCookie] = useCookies();\r\n  //          state: userEmail path variable 상태          //\r\n  const { userEmail } = useParams();\r\n\r\n  //          function: 네비게이트 함수         //\r\n  const navigate = useNavigate();\r\n\r\n  //          component: 유저 화면 상단 컴포넌트          //\r\n  const UserTop = () => {\r\n\r\n    //          state: 이미지 파일 인풋 참조 상태         //\r\n    const imageInputRef = useRef<HTMLInputElement | null>(null);\r\n    //          state: 닉네임 변경 여부 상태          //\r\n    const [isChangeNickname, setIsChangeNickname] = useState<boolean>(false);\r\n    //          state: 닉네임 상태          //\r\n    const [nickname, setNickname] = useState<string>('');\r\n    //          state: 닉네임 변경 상태          //\r\n    const [changeNickname, setChangeNickname] = useState<string>('');\r\n    //          state: 프로필 이미지 상태          //\r\n    const [profileImage, setProfileImage] = useState<string | null>(null);\r\n\r\n    //          function: get user response 처리 함수          //\r\n    const getUserResponse = (responseBody: GetUserResponseDto | ResponseDto | null) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n\r\n      if (code === 'NU') alert('존재하지 않는 유저입니다.')\r\n      if (code === 'DBE') alert('데이터베이스 오류입니다.')\r\n      if (code !== 'SU') {\r\n        navigate(MAIN_PATH());\r\n        return;\r\n      }\r\n\r\n      const { email, nickname, profileImage } = responseBody as GetUserResponseDto;\r\n      setNickname(nickname);\r\n      setProfileImage(profileImage)\r\n      const isMyPage = email === loginUser?.email;\r\n      setMyPage(isMyPage);\r\n    }\r\n    //          function: file upload response 처리 함수          //\r\n    const fileUploadResponse = (profileImage: string | null) => {\r\n      if (!profileImage) return;\r\n      if (!cookies.accessToken) return;\r\n      const requestBody: PatchProfileImageRequestDto = { profileImage };\r\n      \r\n      patchProfileImageRequest(requestBody, cookies.accessToken).then(patchProfileImageResponse);\r\n    }\r\n    //          function: patch profile image response 처리 함수          //\r\n    const patchProfileImageResponse = (responseBody: PatchProfileImageResponseDto | ResponseDto | null) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n\r\n      if (code === 'AF') alert('인증에 실패했습니다.');\r\n      if (code === 'NU') alert('존재하지 않는 유저입니다.');\r\n      if (code === 'DBE') alert('데이터베이스 오류입니다.');\r\n      if (code !== 'SU') return;\r\n\r\n      if (!userEmail) return;\r\n      getUserRequest(userEmail).then(getUserResponse);\r\n    }\r\n    //          function: patch nickname response 처리 함수          //\r\n    const patchNicknameResponse = (responseBody: PatchNicknameResponseDto | ResponseDto | null) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n\r\n      if (code === 'VF') alert('닉네임은 필수입니다.');\r\n      if (code === 'AF') alert('인증에 실패했습니다.');\r\n      if (code === 'DN') alert('중복되는 닉네임입니다');\r\n      if (code === 'NU') alert('존재하지 않는 유저입니다.');\r\n      if (code === 'DBE') alert('데이터베이스 오류입니다.');\r\n      if (code !== 'SU') return;\r\n\r\n      if (!userEmail) return;\r\n      getUserRequest(userEmail).then(getUserResponse);\r\n    }\r\n\r\n    //          event handler: 프로필 박스 클릭 이벤트 처리         //\r\n    const onProfileBoxClickHandler = () => {\r\n      if (!isMyPage) return;\r\n      if (!imageInputRef.current) return;\r\n      imageInputRef.current.click();\r\n    }\r\n    //          event handler: 닉네임 변경 버튼 클릭 이벤트 처리         //\r\n    const onNicknameEditButtonClickHandler = () => {\r\n      if (!isChangeNickname) {\r\n        setChangeNickname(nickname);\r\n        setIsChangeNickname(!isChangeNickname);\r\n        return;\r\n      }\r\n\r\n      if (!cookies.accessToken) return;\r\n      const requestBody : PatchNicknameRequestDto = {\r\n        nickname: changeNickname\r\n      };\r\n      patchNicknameRequest(requestBody, cookies.accessToken).then(patchNicknameResponse);\r\n      setIsChangeNickname(false);\r\n    }\r\n    //          event handler: 프로필 이미지 변경 이벤트 처리         //\r\n    const onProfileImageChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      if (!event.target.files || !event.target.files.length) return;\r\n\r\n      const file = event.target.files[0];\r\n      const data = new FormData();\r\n      data.append('file', file);\r\n\r\n      fileUploadRequest(data).then(fileUploadResponse)\r\n    }\r\n    //          event handler: 닉네임 변경 이벤트 처리         //\r\n    const onNicknameChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setChangeNickname(value);\r\n    }\r\n\r\n    //          effect: user email path variable 변경 시 실행할 함수          //\r\n    useEffect(() => {\r\n      if (!userEmail) return;\r\n      getUserRequest(userEmail).then(getUserResponse);\r\n    }, [userEmail]);\r\n\r\n    //          render: 유저 화면 상단 컴포넌트 렌더링          //\r\n    return (\r\n      <div id='user-top-wrapper'>\r\n        <div className='user-top-container'>\r\n          {isMyPage ? \r\n          <div className='user-top-my-profile-image-box' onClick={onProfileBoxClickHandler}>\r\n            {profileImage !== null ? \r\n            <div className='user-top-profile-image' style={{ backgroundImage: `url(${profileImage})` }}></div> : \r\n            <div className='icon-box-large'>\r\n              <div className='icon image-box-white-icon'></div>\r\n            </div>\r\n            }\r\n            <input ref={imageInputRef} type='file' accept='image/*' style={{display: 'none'}} onChange={onProfileImageChangeHandler}/> \r\n          </div> :\r\n          <div className='user-top-profile-image-box' style={{ backgroundImage: `url(${profileImage ? profileImage : defaultProfileImage})` }}></div>\r\n          }\r\n          <div className='user-top-info-box'>\r\n            <div className='user-top-info-nickname-box'>\r\n              {isMyPage ?\r\n              <>\r\n              {isChangeNickname ?\r\n              <input className='user-top-info-nickname-input' type='text' placeholder={'닉네임'} size={changeNickname.length + 2} value={changeNickname} onChange={onNicknameChangeHandler}/> :\r\n              <div className='user-top-info-nickname'>{nickname}</div>\r\n              }\r\n              <div className='icon-button' onClick={onNicknameEditButtonClickHandler}>\r\n                <div className='icon edit-icon'></div>\r\n              </div>\r\n              </> :\r\n              <div className='user-top-info-nickname'>{nickname}</div>\r\n              }\r\n            </div>\r\n            <div className='user-top-info-email'>{userEmail}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n  }\r\n\r\n  //          component: 유저 화면 하단 컴포넌트          //\r\n  const UserBottom = () => {\r\n\r\n    //          state: 페이지네이션 관련 상태          //\r\n    const {\r\n            currentPage, currentSection, viewList, viewPageList, totalSection,\r\n            setCurrentPage, setCurrentSection, setTotalList\r\n        } = usePagination<BoardListItem>(5);\r\n    //          state: 게시물 개수 상태          //\r\n    const [count, setCount] = useState<number>(1);\r\n\r\n    //          event handler: 사이드 카드 클릭 이벤트 처리          //\r\n    const onSideCardClickHandler = () => {\r\n      if (isMyPage) navigate(BOARD_PATH() + '/' + BOARD_WRITE_PATH());\r\n      else if (loginUser) navigate(USER_PATH(loginUser.email));\r\n    }\r\n\r\n    //          function: get user board list response 처리 함수          //\r\n    const getUserBoardListResponse = (responseBody: GetUserBoardListResponseDto | ResponseDto | null) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n\r\n      if (code === 'NU') {\r\n        alert('존재하지 않는 유저입니다다');\r\n        navigate(MAIN_PATH());\r\n        return;\r\n      }\r\n      if (code === 'DBE') alert('데이터베이스 오류입니다.');\r\n      if (code !== 'SU') return;\r\n\r\n      const { userBoardList } = responseBody as GetUserBoardListResponseDto;\r\n      setTotalList(userBoardList);\r\n      setCount(userBoardList.length);\r\n    }\r\n\r\n    //          effect: userEmail path variable 변경 시 실행할 함수         //\r\n    useEffect(() => {\r\n      if (!userEmail) return;\r\n      getUserBoardListRequest(userEmail).then(getUserBoardListResponse);\r\n    }, [userEmail])\r\n\r\n    //          render: 유저 화면 하단 컴포넌트 렌더링          //  \r\n    return (\r\n      <div id='user-bottom-wrapper'>\r\n        <div className='user-bottom-container'>\r\n          <div className='user-bottom-title'>{isMyPage ? '내 게시물 ' : '게시물 '}<span className='emphasis'>{count}</span></div>\r\n            <div className='user-bottom-contents-box'>\r\n              {count === 0 ?\r\n              <div className='user-bottom-contents-nothing'>{`게시물이 없습니다.`}</div> :\r\n              <div className='user-bottom-contents'>\r\n                {viewList.map(item => <BoardItem boardListItem={item}/>)}\r\n              </div>\r\n              }\r\n              <div className='user-bottom-side-box'>\r\n                <div className='user-bottom-side-card' onClick={onSideCardClickHandler}>\r\n                  <div className='user-bottom-side-container'>\r\n                    {isMyPage ? \r\n                    <>\r\n                    <div className='icon-box'>\r\n                      <div className='icon edit-icon'></div>\r\n                    </div>\r\n                    <div className='user-bottom-side-text'>{`글쓰기`}</div>\r\n                    </> :\r\n                    <>\r\n                    <div className='user-bottom-side-text'>{`내 게시물로 가기`}</div>\r\n                    <div className='icon-box'>\r\n                      <div className='icon arrow-right-icon'></div>\r\n                    </div>\r\n                    </>\r\n                    }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='user-bottom-pagination-box'>\r\n              {count !== 0 && \r\n              <Pagination\r\n                currentPage={currentPage}\r\n                currentSection={currentSection}\r\n                setCurrentPage={setCurrentPage}\r\n                setCurrentSection={setCurrentSection}\r\n                viewPageList={viewPageList}\r\n                totalSection={totalSection}\r\n              />}\r\n            </div>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  //          render: 유저 화면 컴포넌트 렌더링          //  \r\n  return (\r\n\r\n    <>\r\n      <UserTop />\r\n      <UserBottom />\r\n    </>\r\n    \r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}