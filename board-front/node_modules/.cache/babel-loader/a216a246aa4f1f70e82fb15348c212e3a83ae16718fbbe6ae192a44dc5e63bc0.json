{"ast":null,"code":"import{useNavigate,useParams}from'react-router-dom';import'./style.css';import{useEffect,useState}from'react';import BoardItem from'components/BoardItem';import{SEARCH_PATH}from'constant';import Pagination from'components/Pagination';import{GetRelationListRequest,getSearchBoardListRequest}from'apis';import{usePagination}from'hooks';import{Fragment as _Fragment,jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";//          component: 검색 화면 컴포넌트          //\nexport default function Search(){//          function: 네비게이트 함수          //\nconst navigate=useNavigate();//          state: searchWord path variable 상태          //\nconst{searchWord}=useParams();//          state: 페이지네이션 관련 상태          //\nconst{currentPage,currentSection,viewList,viewPageList,totalSection,setCurrentPage,setCurrentSection,setTotalList}=usePagination(5);//          state: 이전 검색어 상태          //\nconst[preSearchWord,setPreSearchWord]=useState(null);//          state: 검색 게시물 개수 상태          //\nconst[count,setCount]=useState(1);//          state: 검색 게시물 리스트 상태          //\n//          state: 연관 검색어 리스트 상태          //\nconst[relativeWordList,setRelativeWordListt]=useState([]);//          event handler: 연관 검색어 클릭 이벤트 처리          //\nconst onRelationWordClickHandler=word=>{navigate(SEARCH_PATH(word));};//          function: get search board list response 처리 함수          //\nconst getSearchBoardListResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code==='DBE')alert('데이터베이스 오류입니다.');if(code!=='SU')return;if(!searchWord)return;const{searchList}=responseBody;setTotalList(searchList);setCount(searchList.length);setPreSearchWord(searchWord);};//          function: get relation list response 처리 함수          //\nconst GetRelationListResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code==='DBE')alert('데이터베이스 오류입니다.');if(code!=='SU')return;if(!searchWord)return;const{relativeWordList}=responseBody;setRelativeWordListt(relativeWordList);};//          effect: search word 상태 변경 시 실행될 함수          //\nuseEffect(()=>{if(!searchWord)return;getSearchBoardListRequest(searchWord,preSearchWord).then(getSearchBoardListResponse);GetRelationListRequest(searchWord).then(GetRelationListResponse);},[searchWord]);//          render: 검색 화면 컴포넌트 렌더링          //\nif(!searchWord)return/*#__PURE__*/_jsx(_Fragment,{});return/*#__PURE__*/_jsx(\"div\",{id:\"search-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"search-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-title-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-title\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"search-title-emphasis\",children:searchWord}),`에 대한 검색 결과입니다.`]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-count\",children:count})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"search-contents-box\",children:[count===0?/*#__PURE__*/_jsx(\"div\",{className:\"search-contents-nothing\",children:`검색 결과가 없습니다.`}):/*#__PURE__*/_jsx(\"div\",{className:\"search-contents\",children:viewList.map(boardListItem=>/*#__PURE__*/_jsx(BoardItem,{boardListItem:boardListItem}))}),/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"search-relation-card-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card-title\",children:'연관 검색어'}),relativeWordList.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card-contents-nothing\",children:`연관 검색어가 없습니다.`}):/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card-contents\",children:relativeWordList.map(word=>/*#__PURE__*/_jsx(\"div\",{className:\"word-badge\",onClick:()=>onRelationWordClickHandler(word),children:word}))})]})})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-pagination-box\",children:count!==0&&/*#__PURE__*/_jsx(Pagination,{currentPage:currentPage,currentSection:currentSection,setCurrentPage:setCurrentPage,setCurrentSection:setCurrentSection,viewPageList:viewPageList,totalSection:totalSection})})]})});}","map":{"version":3,"names":["useNavigate","useParams","useEffect","useState","BoardItem","SEARCH_PATH","Pagination","GetRelationListRequest","getSearchBoardListRequest","usePagination","Fragment","_Fragment","jsx","_jsx","jsxs","_jsxs","Search","navigate","searchWord","currentPage","currentSection","viewList","viewPageList","totalSection","setCurrentPage","setCurrentSection","setTotalList","preSearchWord","setPreSearchWord","count","setCount","relativeWordList","setRelativeWordListt","onRelationWordClickHandler","word","getSearchBoardListResponse","responseBody","code","alert","searchList","length","GetRelationListResponse","then","id","children","className","map","boardListItem","onClick"],"sources":["C:/Users/정준/Documents/spring-react-mysql/board-front/src/views/Search/index.tsx"],"sourcesContent":["import { useNavigate, useParams } from 'react-router-dom'\r\nimport './style.css'\r\nimport { useEffect, useState } from 'react';\r\nimport { BoardListItem } from 'types/interface';\r\nimport BoardItem from 'components/BoardItem';\r\nimport { SEARCH_PATH } from 'constant';\r\nimport Pagination from 'components/Pagination';\r\nimport { GetRelationListRequest, getSearchBoardListRequest } from 'apis';\r\nimport { GetSearchBoardListResponseDto } from 'apis/response/board';\r\nimport { ResponseDto } from 'apis/response';\r\nimport { usePagination } from 'hooks';\r\nimport { GetRelationListResponseDto } from 'apis/response/search';\r\n\r\n//          component: 검색 화면 컴포넌트          //\r\nexport default function Search() {\r\n\r\n  //          function: 네비게이트 함수          //\r\n  const navigate = useNavigate();\r\n\r\n  //          state: searchWord path variable 상태          //\r\n  const { searchWord } = useParams();\r\n  //          state: 페이지네이션 관련 상태          //\r\n  const {\r\n          currentPage, currentSection, viewList, viewPageList, totalSection,\r\n          setCurrentPage, setCurrentSection, setTotalList\r\n      } = usePagination<BoardListItem>(5);\r\n  //          state: 이전 검색어 상태          //\r\n  const [preSearchWord, setPreSearchWord] = useState<string | null>(null);\r\n  //          state: 검색 게시물 개수 상태          //\r\n  const [count, setCount] = useState<number>(1);\r\n  //          state: 검색 게시물 리스트 상태          //\r\n  \r\n  //          state: 연관 검색어 리스트 상태          //\r\n  const [relativeWordList, setRelativeWordListt] = useState<string[]>([]);\r\n\r\n  //          event handler: 연관 검색어 클릭 이벤트 처리          //\r\n  const onRelationWordClickHandler = (word: string) => {\r\n    navigate(SEARCH_PATH(word));\r\n  }\r\n\r\n  //          function: get search board list response 처리 함수          //\r\n  const getSearchBoardListResponse = (responseBody: GetSearchBoardListResponseDto | ResponseDto | null) => {\r\n    if (!responseBody) return;\r\n    const { code } = responseBody;\r\n\r\n    if (code === 'DBE') alert('데이터베이스 오류입니다.');\r\n    if (code !== 'SU') return;\r\n\r\n    if (!searchWord) return;\r\n    const { searchList } = responseBody as GetSearchBoardListResponseDto;\r\n    setTotalList(searchList);\r\n    setCount(searchList.length);\r\n    setPreSearchWord(searchWord);\r\n  }\r\n  //          function: get relation list response 처리 함수          //\r\n  const GetRelationListResponse = (responseBody: GetRelationListResponseDto | ResponseDto | null) => {\r\n    if (!responseBody) return;\r\n    const { code } = responseBody;\r\n\r\n    if (code === 'DBE') alert('데이터베이스 오류입니다.');\r\n    if (code !== 'SU') return;\r\n\r\n    if (!searchWord) return;\r\n    const { relativeWordList } = responseBody as GetRelationListResponseDto;\r\n    setRelativeWordListt(relativeWordList);\r\n  }\r\n\r\n  //          effect: search word 상태 변경 시 실행될 함수          //\r\n  useEffect(() => {\r\n    if (!searchWord) return;\r\n    getSearchBoardListRequest(searchWord, preSearchWord).then(getSearchBoardListResponse)\r\n    GetRelationListRequest(searchWord).then(GetRelationListResponse)\r\n  }, [searchWord]);\r\n\r\n  //          render: 검색 화면 컴포넌트 렌더링          //\r\n  if (!searchWord) return (<></>);\r\n  return (\r\n    <div id='search-wrapper'>\r\n      <div className='search-container'>\r\n        <div className='search-title-box'>\r\n          <div className='search-title'><span className='search-title-emphasis'>{searchWord}</span>{`에 대한 검색 결과입니다.`}</div>\r\n          <div className='search-count'>{count}</div>\r\n        </div>\r\n        <div className='search-contents-box'>\r\n          {count === 0 ? \r\n          <div className='search-contents-nothing'>{`검색 결과가 없습니다.`}</div> :\r\n          <div className='search-contents'>{viewList.map(boardListItem => <BoardItem boardListItem={boardListItem} />)}</div>\r\n          }\r\n          <div className='search-relation-box'>\r\n            <div className='search-relation-card'>\r\n              <div className='search-relation-card-container'>\r\n                <div className='search-relation-card-title'>{'연관 검색어'}</div>\r\n                {relativeWordList.length === 0 ?\r\n                <div className='search-relation-card-contents-nothing'>{`연관 검색어가 없습니다.`}</div> : \r\n                <div className='search-relation-card-contents'>{relativeWordList.map(word => <div className='word-badge' onClick={() => onRelationWordClickHandler(word)}>{word}</div>)}</div>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='search-pagination-box'>\r\n          {count !== 0 && \r\n          <Pagination\r\n            currentPage={currentPage}\r\n            currentSection={currentSection}\r\n            setCurrentPage={setCurrentPage}\r\n            setCurrentSection={setCurrentSection}\r\n            viewPageList={viewPageList}\r\n            totalSection={totalSection}\r\n          />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}